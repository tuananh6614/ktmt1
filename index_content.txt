import { useEffect, useState, useRef } from "react";
import { Link } from "react-router-dom";
import { Book, ArrowRight, Star, Users, Award, Clock, BookOpen, Video, FileText, MousePointer, ChevronDown } from "lucide-react";
import NavBar from "@/components/componentsforpages/NavBar";
import Footer from "@/components/componentsforpages/Footer";
import ChatBox from "@/components/componentsforpages/ChatBox";
import CourseCard from "@/components/componentsforpages/CourseCard";
import DocumentCard from "@/components/componentsforpages/DocumentCard";
import { motion, useScroll, useTransform, useInView, useSpring, AnimatePresence } from "framer-motion";
import FeaturedSection from "@/components/componentsforpages/FeaturedSection";
import CoursePromoBanner from "@/components/componentsforpages/CoursePromoBanner";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";

// Định nghĩa interface cho dữ liệu khóa học từ API
interface Course {
  id: number;
  title: string;
  description: string;
  thumbnail: string;
  status: 'active' | 'inactive' | 'maintenance';
  created_at: string;
  updated_at: string;
}

const API_URL = 'http://localhost:3000/api';

// Component cho animated background
const AnimatedBackground = () => {
  return (
    <div className="fixed inset-0 z-0 overflow-hidden opacity-20 pointer-events-none">
      <div className="absolute inset-0 bg-[radial-gradient(#e5e7eb_1px,transparent_1px)] [background-size:20px_20px]"></div>
      {[...Array(10)].map((_, i) => (
        <motion.div 
          key={i}
          className="absolute rounded-full bg-gradient-to-r from-dtktmt-blue-light to-dtktmt-purple-light blur-2xl"
          initial={{ 
            x: Math.random() * 100 - 50 + "%", 
            y: Math.random() * 100 - 50 + "%",
            scale: Math.random() * 0.5 + 0.5,
            opacity: Math.random() * 0.3
          }}
          animate={{ 
            x: [
              Math.random() * 100 - 50 + "%", 
              Math.random() * 100 - 50 + "%", 
              Math.random() * 100 - 50 + "%"
            ],
            y: [
              Math.random() * 100 - 50 + "%", 
              Math.random() * 100 - 50 + "%", 
              Math.random() * 100 - 50 + "%"
            ],
            scale: [
              Math.random() * 0.5 + 0.5, 
              Math.random() * 0.7 + 0.3, 
              Math.random() * 0.5 + 0.5
            ]
          }}
          transition={{ 
            repeat: Infinity, 
            duration: Math.random() * 20 + 20, 
            ease: "linear"
          }}
          style={{
            width: `${Math.random() * 30 + 5}vw`,
            height: `${Math.random() * 30 + 5}vh`,
          }}
        />
      ))}
    </div>
  );
};

const Index = () => {
  const [popularCourses, setPopularCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [topDocuments, setTopDocuments] = useState<any[]>([]);
  const [documentsLoading, setDocumentsLoading] = useState(true);
  const [documentsError, setDocumentsError] = useState<string | null>(null);
  const heroRef = useRef(null);
  const statsRef = useRef(null);
  const isStatsInView = useInView(statsRef, { once: true, amount: 0.5 });
  const { scrollYProgress } = useScroll();
  const opacity = useTransform(scrollYProgress, [0, 0.2], [1, 0]);
  const scale = useTransform(scrollYProgress, [0, 0.2], [1, 0.95]);
  const y = useTransform(scrollYProgress, [0, 0.2], [0, -50]);
  const heroOpacitySpring = useSpring(opacity, { stiffness: 100, damping: 30 });
  const heroScaleSpring = useSpring(scale, { stiffness: 100, damping: 30 });
  const heroYSpring = useSpring(y, { stiffness: 100, damping: 30 });
  
  const [showScrollIndicator, setShowScrollIndicator] = useState(true);
  
  // Ẩn chỉ báo cuộn khi người dùng cuộn xuống
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 100) {
        setShowScrollIndicator(false);
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);
  
  // Lấy danh sách khóa học từ API
  useEffect(() => {
    const fetchCourses = async () => {
      try {
        setLoading(true);
        const response = await fetch(`${API_URL}/courses`);
        
        if (!response.ok) {
          throw new Error("Không thể tải danh sách khóa học");
        }
        
        const data = await response.json();
        // Chỉ lấy các khóa học active và giới hạn 6 khóa học
        const activeCourses = data
          .filter((course: Course) => course.status === 'active')
          .slice(0, 6);
          
        setPopularCourses(activeCourses);
        setError(null);
      } catch (err) {
        console.error("Lỗi khi tải khóa học:", err);
        setError("Không thể tải danh sách khóa học");
      } finally {
        setLoading(false);
      }
    };
    
    fetchCourses();
  }, []);

  // Lấy danh sách tài liệu bán chạy từ API
  useEffect(() => {
    const fetchTopDocuments = async () => {
      try {
        setDocumentsLoading(true);
        const response = await fetch(`${API_URL}/documents`);
        
        if (!response.ok) {
          throw new Error("Không thể tải danh sách tài liệu");
        }
        
        const data = await response.json();
        // Lấy 3 tài liệu đầu tiên
        const topDocs = data.slice(0, 3).map((doc: any) => ({
          id: String(doc.id),
          title: doc.title,
          description: doc.description,
          price: doc.price,
          image: doc.thumbnail || "/placeholder.svg",
          fileType: doc.file_path ? doc.file_path.split('.').pop() : "pdf",
          preview: `${API_URL}/documents/preview/${doc.id}`,
        }));
        
        setTopDocuments(topDocs);
        setDocumentsError(null);
      } catch (err) {
        console.error("Lỗi khi tải tài liệu:", err);
        setDocumentsError("Không thể tải danh sách tài liệu");
      } finally {
        setDocumentsLoading(false);
      }
    };
    
    fetchTopDocuments();
  }, []);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("animate-slide-in-bottom");
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    document.querySelectorAll(".animate-on-scroll").forEach((el) => {
      observer.observe(el);
    });

    return () => {
      document.querySelectorAll(".animate-on-scroll").forEach((el) => {
        observer.unobserve(el);
      });
    };
  }, []);

  const testimonials = [
    {
      id: "1",
      name: "Nguyễn Văn A",
      course: "Vi điều khiển STM32",
      comment: "Khóa học rất chi tiết và dễ hiểu. Tôi đã học được rất nhiều kiến thức mới và áp dụng thành công trong dự án của mình.",
      avatar: "/placeholder.svg",
      rating: 5,
    },
    {
      id: "2",
      name: "Trần Thị B",
      course: "IoT và ứng dụng",
      comment: "Tài liệu hướng dẫn rất hay, giảng viên nhiệt tình. Đã giúp tôi hoàn thành dự án IoT của mình với thời gian ngắn hơn dự kiến.",
      avatar: "/placeholder.svg",
      rating: 5,
    },
    {
      id: "3",
      name: "Lê Văn C",
      course: "Điện tử số",
      comment: "Nội dung cập nhật với công nghệ mới nhất, bài tập thực hành rất bổ ích. Tôi đã tự tin thiết kế mạch số sau khi hoàn thành khóa học.",
      avatar: "/placeholder.svg",
      rating: 4,
    }
  ];

  const fadeInUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.6 }
    }
  };
  
  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2
      }
    }
  };
  
  const stats = [
    { icon: <Users className="w-8 h-8 text-dtktmt-blue-light" />, value: "5,000+", label: "Người học" },
    { icon: <BookOpen className="w-8 h-8 text-dtktmt-pink-medium" />, value: "30+", label: "Khóa học" },
    { icon: <Video className="w-8 h-8 text-dtktmt-purple-medium" />, value: "500+", label: "Bài giảng" },
    { icon: <FileText className="w-8 h-8 text-dtktmt-blue-dark" />, value: "200+", label: "Tài liệu" },
  ];
  
  const features = [
    { 
      title: "Học bất cứ lúc nào", 
      description: "Linh hoạt thời gian học, có thể truy cập mọi lúc mọi nơi",
      icon: <Clock className="w-10 h-10 text-dtktmt-blue-medium" />
    },
    { 
      title: "Nội dung chất lượng cao", 
      description: "Các khóa học được biên soạn kỹ lưỡng bởi các chuyên gia hàng đầu",
      icon: <Award className="w-10 h-10 text-dtktmt-pink-medium" />
    },
    { 
      title: "Tương tác cộng đồng", 
      description: "Tham gia diễn đàn trao đổi kiến thức và giải đáp thắc mắc",
      icon: <Users className="w-10 h-10 text-dtktmt-purple-medium" />
    },
  ];

  return (
    <div className="min-h-screen flex flex-col relative overflow-x-hidden">
      <AnimatedBackground />
      <NavBar />

      <main className="flex-1 relative z-10">
        {/* Hero Section */}
        <motion.div 
          ref={heroRef}
          className="relative py-10 overflow-hidden"
          style={{
            opacity: heroOpacitySpring,
            scale: heroScaleSpring,
            y: heroYSpring,
          }}
        >          
          <div className="container mx-auto px-4 pt-8 pb-12 relative z-10">
            <div className="grid grid-cols-1 lg:grid-cols-5 gap-8 items-center">
              <div className="lg:col-span-3 text-center lg:text-left">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-4 leading-tight tracking-tight">
                    Nền tảng học liệu <span className="bg-gradient-to-r from-dtktmt-blue-medium to-dtktmt-purple-medium bg-clip-text text-transparent">điện tử và</span> <span className="bg-gradient-to-r from-dtktmt-purple-medium to-dtktmt-pink-medium bg-clip-text text-transparent">kỹ thuật máy tính</span>
                  </h1>
                </motion.div>
                <motion.p 
                  className="text-lg text-gray-600 mb-8 max-w-2xl mx-auto lg:mx-0"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.1 }}
                >
                  Học với các chuyên gia hàng đầu trong lĩnh vực điện tử và kỹ thuật máy tính. Nâng cao kỹ năng với các khóa học chất lượng cao và tài liệu đầy đủ.
                </motion.p>
                <motion.div 
                  className="flex flex-wrap gap-4 justify-center lg:justify-start"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.2 }}
                >
                  <Link 
                    to="/khoa-hoc" 
                    className="px-8 py-3 bg-gradient-to-r from-dtktmt-blue-medium to-dtktmt-purple-medium text-white font-medium rounded-full shadow-lg hover:shadow-xl transition-all hover:-translate-y-1 flex items-center gap-2"
                  >
                    <span>Khám phá khóa học</span>
                    <ArrowRight size={18} />
                  </Link>
                  <Link 
                    to="/tai-lieu" 
                    className="px-8 py-3 bg-white text-dtktmt-blue-dark font-medium rounded-full shadow-md hover:shadow-lg border border-gray-200 transition-all hover:-translate-y-1"
                  >
                    Xem tài liệu
                  </Link>
                </motion.div>
              </div>
              <div className="lg:col-span-2 hidden lg:block">
                <motion.div 
                  className="perspective-effect"
                  initial={{ opacity: 0, rotateY: -15 }}
                  animate={{ opacity: 1, rotateY: 0 }}
                  transition={{ duration: 0.8, delay: 0.3 }}
                >
                  <div className="relative mx-auto w-full max-w-md">
                    <div style={{ perspective: "1000px" }}>
                      <div 
                        className="absolute -top-6 -left-6 w-72 h-72 bg-gradient-to-br from-dtktmt-blue-light to-dtktmt-blue-medium rounded-2xl shadow-xl transform rotate-6"
                        style={{ transform: "rotateY(15deg) rotateX(5deg)" }}
                      ></div>
                      <div 
                        className="absolute -bottom-6 -right-6 w-72 h-72 bg-gradient-to-br from-dtktmt-purple-light to-dtktmt-pink-medium rounded-2xl shadow-xl transform -rotate-6"
                        style={{ transform: "rotateY(-10deg) rotateX(-5deg)" }}
                      ></div>
                      <div 
                        className="relative z-10 bg-white p-6 rounded-xl shadow-2xl"
                        style={{ transform: "rotateY(-5deg) rotateX(3deg)" }}
                      >
                        <div className="w-full h-48 bg-dtktmt-blue-light/20 rounded-lg mb-4 overflow-hidden">
                          <img src="/placeholder.svg" alt="Course" className="w-full h-full object-cover" />
                        </div>
                        <div className="space-y-3">
                          <div className="h-6 bg-gray-200 rounded-full w-3/4"></div>
                          <div className="h-4 bg-gray-200 rounded-full"></div>
                          <div className="h-4 bg-gray-200 rounded-full w-5/6"></div>
                          <div className="h-10 bg-dtktmt-blue-medium rounded-lg mt-4"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </motion.div>
              </div>
            </div>
            
            <AnimatePresence>
              {showScrollIndicator && (
                <motion.div 
                  className="absolute bottom-0 left-1/2 transform -translate-x-1/2"
                  initial={{ opacity: 0, y: -20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.5, delay: 1.5 }}
                >
                  <motion.div
                    animate={{ y: [0, 10, 0] }}
                    transition={{ repeat: Infinity, duration: 1.5 }}
                    className="flex flex-col items-center text-gray-400"
                  >
                    <span className="text-sm mb-2">Cuộn xuống</span>
                    <ChevronDown size={20} />
                  </motion.div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </motion.div>

        {/* Thống kê */}
        <motion.section 
          ref={statsRef}
          className="py-8 bg-gray-50/70"
        >
          <div className="container mx-auto px-4">
            <motion.div 
              className="grid grid-cols-2 md:grid-cols-4 gap-6"
              initial="hidden"
              animate={isStatsInView ? "visible" : "hidden"}
              variants={staggerContainer}
            >
              {stats.map((stat, index) => (
                <motion.div 
                  key={index}
                  variants={fadeInUp}
                  className="bg-white rounded-xl shadow-md p-6 text-center hover:shadow-lg transition-shadow transform hover:-translate-y-1"
                >
                  <div className="rounded-full w-16 h-16 bg-gray-100 flex items-center justify-center mx-auto mb-4">
                    {stat.icon}
                  </div>
                  <h3 className="text-2xl font-bold text-dtktmt-blue-dark mb-1">{stat.value}</h3>
                  <p className="text-gray-500">{stat.label}</p>
                </motion.div>
              ))}
            </motion.div>
          </div>
        </motion.section>

        <div className="container mx-auto px-4 pb-8 mt-8">
          <FeaturedSection />

          {/* Khóa học nổi bật */}
          <motion.section 
            className="mb-8"  {/* Giảm margin bottom từ 16 xuống 8 */}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.1 }}
          >
            <div className="flex justify-between items-center mb-6">
              <motion.div variants={fadeInUp}>
                <h2 className="text-2xl md:text-3xl font-bold text-dtktmt-blue-dark mb-2">
                  <span className="gradient-text">Khóa học</span> nổi bật
                </h2>
                <p className="text-gray-500">Những khóa học được sinh viên yêu thích nhất</p>
              </motion.div>
              <motion.div variants={fadeInUp}>
                <Link
                  to="/khoa-hoc"
                  className="neo-button text-white flex items-center gap-2 text-sm"
                >
                  <span>Xem tất cả</span>
                  <ArrowRight size={16} />
                </Link>
              </motion.div>
            </div>

            {loading ? (
              <div className="text-center py-8">
                <div className="w-12 h-12 border-4 border-dtktmt-blue-medium border-t-transparent rounded-full mx-auto animate-spin"></div>
                <p className="text-gray-500 mt-4">Đang tải khóa học...</p>
              </div>
            ) : error ? (
              <div className="text-center py-8">
                <p className="text-red-500">{error}</p>
              </div>
            ) : (
              <Carousel
                opts={{
                  align: "start",
                  loop: true,
                }}
                className="w-full"
              >
                <CarouselContent className="-ml-2 md:-ml-4">
                  {popularCourses.map((course) => (
                    <CarouselItem key={course.id} className="pl-2 md:pl-4 md:basis-1/2 lg:basis-1/3">
                      <CourseCard 
                        id={String(course.id)}
                        title={course.title}
                        description={course.description}
                        image={course.thumbnail}
                        lessons={20} // Giá trị mặc định vì không có trong CSDL
                        duration="10 tuần" // Giá trị mặc định
                        level="Cơ bản" // Giá trị mặc định
                      />
                    </CarouselItem>
                  ))}
                </CarouselContent>
                <div className="flex justify-end mt-2 gap-2">
                  <CarouselPrevious className="static translate-y-0 h-10 w-10 rounded-full hover:bg-dtktmt-blue-medium hover:text-white border-dtktmt-blue-medium" />
                  <CarouselNext className="static translate-y-0 h-10 w-10 rounded-full hover:bg-dtktmt-blue-medium hover:text-white border-dtktmt-blue-medium" />
                </div>
              </Carousel>
            )}

            <div className="mt-6 text-center">
              <Link 
                to="/khoa-hoc" 
                className="bg-dtktmt-blue-medium hover:bg-dtktmt-blue-dark text-white px-8 py-3 rounded-full inline-flex items-center gap-2 transition-colors shadow-lg hover:shadow-xl"
              >
                <span>Khám phá tất cả khóa học</span>
                <ArrowRight size={18} />
              </Link>
            </div>
          </motion.section>
          
          {/* Tài liệu bán chạy */}
          <motion.section
            className="mb-8"
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.1 }}
          >
            <div className="flex justify-between items-center mb-6">
              <motion.div variants={fadeInUp}>
                <h2 className="text-2xl md:text-3xl font-bold text-dtktmt-blue-dark mb-2">
                  <span className="gradient-text">Tài liệu</span> bán chạy
                </h2>
                <p className="text-gray-500">Tài liệu học tập chất lượng cao</p>
              </motion.div>
              <motion.div variants={fadeInUp}>
                <Link
                  to="/tai-lieu"
                  className="neo-button text-white flex items-center gap-2 text-sm"
                >
                  <span>Xem tất cả</span>
                  <ArrowRight size={16} />
                </Link>
              </motion.div>
            </div>

            {documentsLoading ? (
              <div className="text-center py-8">
                <div className="w-12 h-12 border-4 border-dtktmt-blue-medium border-t-transparent rounded-full mx-auto animate-spin"></div>
                <p className="text-gray-500 mt-4">Đang tải tài liệu...</p>
              </div>
            ) : documentsError ? (
              <div className="text-center py-8">
                <p className="text-red-500">{documentsError}</p>
              </div>
            ) : (
              <motion.div 
                className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                variants={staggerContainer}
              >
                {topDocuments.map((doc) => (
                  <motion.div key={doc.id} variants={fadeInUp}>
                    <DocumentCard {...doc} />
                  </motion.div>
                ))}
              </motion.div>
            )}
          </motion.section>

          {/* Tính năng nổi bật */}
          <motion.section 
            className="mb-8 py-8 rounded-3xl bg-gradient-to-r from-dtktmt-blue-light/10 to-dtktmt-purple-light/10"
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.1 }}
          >
            <div className="container mx-auto px-4">
              <motion.div 
                className="text-center max-w-2xl mx-auto mb-8"
                variants={fadeInUp}
              >
                <h2 className="text-2xl md:text-3xl font-bold mb-4 text-dtktmt-blue-dark">
                  Tại sao nên học tại <span className="bg-gradient-to-r from-dtktmt-blue-medium to-dtktmt-purple-medium bg-clip-text text-transparent">DT&KTMT1</span>
                </h2>
                <p className="text-gray-500">
                  Chúng tôi cung cấp môi trường học tập hiện đại, nội dung chất lượng và hỗ trợ liên tục giúp bạn đạt được mục tiêu học tập
                </p>
              </motion.div>
              
              <motion.div 
                className="grid grid-cols-1 md:grid-cols-3 gap-6"
                variants={staggerContainer}
              >
                {features.map((feature, index) => (
                  <motion.div 
                    key={index} 
                    variants={fadeInUp}
                    className="bg-white/80 backdrop-blur-sm p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow flex flex-col items-center text-center"
                    whileHover={{ y: -5 }}
                  >
                    <div className="mb-4 p-4 rounded-full bg-gray-100">{feature.icon}</div>
                    <h3 className="text-xl font-semibold mb-3 text-dtktmt-blue-dark">{feature.title}</h3>
                    <p className="text-gray-500">{feature.description}</p>
                  </motion.div>
                ))}
              </motion.div>
            </div>
          </motion.section>

          {/* Đánh giá từ sinh viên */}
          <motion.section
            className="mb-8"
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.1 }}
          >
            <motion.div variants={fadeInUp} className="text-center mb-8">
              <h2 className="text-2xl md:text-3xl font-bold text-dtktmt-blue-dark mb-2">
                Học viên <span className="gradient-text">đánh giá</span>
              </h2>
              <p className="text-gray-500 max-w-2xl mx-auto">
                Xem những gì học viên của chúng tôi nói về trải nghiệm học tập tại DT&KTMT1
              </p>
            </motion.div>

            <motion.div variants={staggerContainer}>
              <ScrollArea className="h-[380px] pr-4">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {[...testimonials, ...testimonials].map((testimonial, index) => (
                    <motion.div 
                      key={`${testimonial.id}-${index}`}
                      variants={fadeInUp}
                      whileHover={{ scale: 1.02 }}
                      className="bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition-all border border-gray-100"
                    >
                      <div className="flex items-center mb-4">
                        <div className="w-12 h-12 rounded-full overflow-hidden mr-4">
                          <img 
                            src={testimonial.avatar} 
                            alt={testimonial.name} 
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <div>
                          <h4 className="font-semibold text-dtktmt-blue-dark">{testimonial.name}</h4>
                          <p className="text-xs text-gray-500">{testimonial.course}</p>
                        </div>
                      </div>
                      <p className="text-gray-600 italic mb-4">"{testimonial.comment}"</p>
                      <div className="flex">
                        {[...Array(5)].map((_, i) => (
                          <Star 
                            key={i} 
                            size={16} 
                            className={`${i < testimonial.rating ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300'}`} 
                          />
                        ))}
                      </div>
                    </motion.div>
                  ))}
                </div>
              </ScrollArea>
            </motion.div>
          </motion.section>

          <motion.section 
            className="py-10 px-6 bg-gradient-to-r from-dtktmt-blue-medium to-dtktmt-purple-medium text-white rounded-3xl mt-8"
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.1 }}
          >
            <div className="max-w-4xl mx-auto text-center">
              <motion.h2 
                className="text-2xl md:text-3xl font-bold mb-4 drop-shadow-md"
                variants={fadeInUp}
              >
                Sẵn sàng bắt đầu hành trình học tập?
              </motion.h2>
              <motion.p 
                className="mb-8 text-white/90 max-w-2xl mx-auto"
                variants={fadeInUp}
              >
                Đăng ký tài khoản để trải nghiệm đầy đủ các tính năng và khóa học trên DT&KTMT1.
              </motion.p>
              <motion.div 
                className="flex flex-wrap justify-center gap-4"
                variants={fadeInUp}
              >
                <Link
                  to="/register"
                  className="bg-white text-dtktmt-blue-dark hover:bg-dtktmt-blue-light hover:text-white px-8 py-3 rounded-full font-medium transition-colors shadow-lg hover:shadow-xl"
                >
                  Đăng ký ngay
                </Link>
                <Link
                  to="/login"
                  className="bg-transparent border-2 border-white hover:bg-white hover:text-dtktmt-blue-dark px-8 py-3 rounded-full font-medium transition-colors"
                >
                  Đăng nhập
                </Link>
              </motion.div>
            </div>
          </motion.section>
        </div>
      </main>

      <Footer />
      <ChatBox />
    </div>
  );
};

export default Index;
