
const pool = require('../config/db');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { promisify } = require('util');

// Helper function for handling errors
const catchAsync = (fn) => {
  return (req, res, next) => {
    fn(req, res, next).catch(next);
  };
};

exports.register = catchAsync(async (req, res, next) => {
  console.log('üë§ ƒêang x·ª≠ l√Ω ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi:', req.body.email);
  const { email, password, full_name, phone_number, school } = req.body;
  
  console.log('üîç Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i:', email);
  const [existingUser] = await pool.query(
    'SELECT * FROM users WHERE email = ?',
    [email]
  );
  
  if (existingUser.length > 0) {
    console.log('‚ùå Email ƒë√£ t·ªìn t·∫°i:', email);
    return res.status(400).json({
      success: false,
      message: 'Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω'
    });
  }
  
  console.log('üîê ƒêang m√£ ho√° m·∫≠t kh·∫©u...');
  const hashedPassword = await bcrypt.hash(password, 12);
  
  console.log('üíæ ƒêang l∆∞u th√¥ng tin ng∆∞·ªùi d√πng m·ªõi v√†o CSDL...');
  await pool.query(
    'INSERT INTO users (email, password, full_name, phone_number, school) VALUES (?, ?, ?, ?, ?)',
    [email, hashedPassword, full_name, phone_number, school || null]
  );
  
  console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:', email);
  res.status(201).json({
    success: true,
    message: 'ƒêƒÉng k√Ω th√†nh c√¥ng'
  });
});

// ƒêƒÉng nh·∫≠p
exports.login = catchAsync(async (req, res, next) => {
  const { email, password } = req.body;
  
  // Ki·ªÉm tra email v√† password ƒë√£ ƒë∆∞·ª£c cung c·∫•p ch∆∞a
  if (!email || !password) {
    return res.status(400).json({
      success: false,
      message: 'Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u'
    });
  }
  
  // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
  const [rows] = await pool.query(
    'SELECT * FROM users WHERE email = ?',
    [email]
  );
  
  const user = rows[0];
  
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({
      success: false,
      message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c'
    });
  }
  
  // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
  if (user.status !== 'active') {
    return res.status(401).json({
      success: false,
      message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kho√° ho·∫∑c ch∆∞a k√≠ch ho·∫°t'
    });
  }
  
  // T·∫°o token
  const token = jwt.sign(
    { id: user.id, email: user.email, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRE }
  );
  
  // L∆∞u token v√†o cookie
  const cookieOptions = {
    expires: new Date(Date.now() + process.env.COOKIE_EXPIRE * 24 * 60 * 60 * 1000),
    httpOnly: true
  };
  
  // Remove password from output
  user.password = undefined;
  
  res.cookie('token', token, cookieOptions);
  res.status(200).json({
    success: true,
    token,
    user
  });
});

// ƒêƒÉng xu·∫•t
exports.logout = (req, res) => {
  res.cookie('token', 'none', {
    expires: new Date(Date.now() + 10 * 1000),
    httpOnly: true
  });
  
  res.status(200).json({
    success: true,
    message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
  });
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
exports.getMe = catchAsync(async (req, res, next) => {
  // Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c qua middleware protect
  const [rows] = await pool.query(
    'SELECT id, email, full_name, phone_number, school, role, status FROM users WHERE id = ?',
    [req.user.id]
  );
  
  const user = rows[0];
  
  res.status(200).json({
    success: true,
    data: user
  });
});

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateDetails = catchAsync(async (req, res, next) => {
  const { full_name, phone_number, school } = req.body;
  
  await pool.query(
    'UPDATE users SET full_name = ?, phone_number = ?, school = ? WHERE id = ?',
    [full_name, phone_number, school, req.user.id]
  );
  
  res.status(200).json({
    success: true,
    message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng'
  });
});

// ƒê·ªïi m·∫≠t kh·∫©u
exports.updatePassword = catchAsync(async (req, res, next) => {
  const { currentPassword, newPassword } = req.body;
  
  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  const [rows] = await pool.query(
    'SELECT * FROM users WHERE id = ?',
    [req.user.id]
  );
  
  const user = rows[0];
  
  // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
  const isMatch = await bcrypt.compare(currentPassword, user.password);
  
  if (!isMatch) {
    return res.status(401).json({
      success: false,
      message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c'
    });
  }
  
  // M√£ ho√° m·∫≠t kh·∫©u m·ªõi
  const hashedPassword = await bcrypt.hash(newPassword, 12);
  
  // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
  await pool.query(
    'UPDATE users SET password = ? WHERE id = ?',
    [hashedPassword, req.user.id]
  );
  
  res.status(200).json({
    success: true,
    message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
  });
});

