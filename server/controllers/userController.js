const pool = require('../config/db');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { promisify } = require('util');

// Helper function for handling errors
const catchAsync = (fn) => {
  return (req, res, next) => {
    fn(req, res, next).catch((error) => {
      console.error('‚ùå L·ªñI:', error.message);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    });
  };
};

// Th√™m log chi ti·∫øt h∆°n ƒë·ªÉ ki·ªÉm tra l·ªói
exports.register = catchAsync(async (req, res, next) => {
  console.log('üë§ ƒêang x·ª≠ l√Ω ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi:', req.body.email);
  console.log('üì¶ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', JSON.stringify(req.body));
  const { email, password, full_name, phone_number, school } = req.body;

  if (!email || !password || !full_name) {
    console.log('‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá');
    return res.status(400).json({
      success: false,
      message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc'
    });
  }

  try {
    console.log('üîç Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i:', email);
    const [existingUser] = await pool.query(
      'SELECT * FROM users WHERE email = ?',
      [email]
    );

    console.log('‚úÖ K·∫øt qu·∫£ ki·ªÉm tra:', existingUser.length > 0 ? 'Email ƒë√£ t·ªìn t·∫°i' : 'Email ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng');

    if (existingUser.length > 0) {
      console.log('‚ùå Email ƒë√£ t·ªìn t·∫°i:', email);
      return res.status(400).json({
        success: false,
        message: 'Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω'
      });
    }

    console.log('üîê ƒêang m√£ ho√° m·∫≠t kh·∫©u...');
    const hashedPassword = await bcrypt.hash(password, 12);

    console.log('üíæ ƒêang l∆∞u th√¥ng tin ng∆∞·ªùi d√πng m·ªõi v√†o CSDL...');
    const [result] = await pool.query(
      'INSERT INTO users (email, password, full_name, phone_number, school, status, role) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [email, hashedPassword, full_name, phone_number, school || null, 'active', 'user']
    );

    console.log('‚úÖ K·∫øt qu·∫£ th√™m ng∆∞·ªùi d√πng:', result);
    console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng, user ID:', result.insertId);

    res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
      userId: result.insertId
    });
  } catch (error) {
    console.error('‚ùå L·ªñI ƒêƒÇNG K√ù:', error.message);
    console.error('Chi ti·∫øt l·ªói:', error.stack);
    // Th√™m th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

exports.login = catchAsync(async (req, res, next) => {
  const { email, password } = req.body;
  
  if (!email || !password) {
    return res.status(400).json({
      success: false,
      message: 'Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u'
    });
  }
  
  const [rows] = await pool.query(
    'SELECT * FROM users WHERE email = ?',
    [email]
  );
  
  const user = rows[0];
  
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({
      success: false,
      message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c'
    });
  }
  
  if (user.status !== 'active') {
    return res.status(401).json({
      success: false,
      message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kho√° ho·∫∑c ch∆∞a k√≠ch ho·∫°t'
    });
  }
  
  const token = jwt.sign(
    { id: user.id, email: user.email, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRE }
  );
  
  const cookieOptions = {
    expires: new Date(Date.now() + process.env.COOKIE_EXPIRE * 24 * 60 * 60 * 1000),
    httpOnly: true
  };
  
  user.password = undefined;
  
  res.cookie('token', token, cookieOptions);
  res.status(200).json({
    success: true,
    token,
    user
  });
});

exports.logout = (req, res) => {
  res.cookie('token', 'none', {
    expires: new Date(Date.now() + 10 * 1000),
    httpOnly: true
  });
  
  res.status(200).json({
    success: true,
    message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
  });
};

exports.getMe = catchAsync(async (req, res, next) => {
  const [rows] = await pool.query(
    'SELECT id, email, full_name, phone_number, school, role, status FROM users WHERE id = ?',
    [req.user.id]
  );
  
  const user = rows[0];
  
  res.status(200).json({
    success: true,
    data: user
  });
});

exports.updateDetails = catchAsync(async (req, res, next) => {
  const { full_name, phone_number, school } = req.body;
  
  await pool.query(
    'UPDATE users SET full_name = ?, phone_number = ?, school = ? WHERE id = ?',
    [full_name, phone_number, school, req.user.id]
  );
  
  res.status(200).json({
    success: true,
    message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng'
  });
});

exports.updatePassword = catchAsync(async (req, res, next) => {
  const { currentPassword, newPassword } = req.body;
  
  const [rows] = await pool.query(
    'SELECT * FROM users WHERE id = ?',
    [req.user.id]
  );
  
  const user = rows[0];
  
  const isMatch = await bcrypt.compare(currentPassword, user.password);
  
  if (!isMatch) {
    return res.status(401).json({
      success: false,
      message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c'
    });
  }
  
  const hashedPassword = await bcrypt.hash(newPassword, 12);
  
  await pool.query(
    'UPDATE users SET password = ? WHERE id = ?',
    [hashedPassword, req.user.id]
  );
  
  res.status(200).json({
    success: true,
    message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
  });
});
